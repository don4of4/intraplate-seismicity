#plotdata <- subset(dataset, format(datetime, "%Y") >= input$bins[1] & format(datetime, "%Y") <= input$bins[2])
  
  #Download handler for CSV download button
  #   output$downloadCSV <- downloadHandler(
  #     filename = function(){
  #       paste('data_', input$bins[1], '-',input$bins[2], '.csv', sep = '')
  #     }, 
  #     content = function(file) {
  #       write.csv(plotdata, file)
  #       }, 
  #     contentType = 'text/csv'
  #     )
  #   
  #   #Download handler for png download button
  #   output$downloadPNG <- downloadHandler(
  #     filename = function(){
  #       paste('data_', input$bins[1], '-',input$bins[2], '.png', sep = '')
  #     }, 
  #     content = function(file) {
  #       write.csv(plotdata, file)
  #     }, 
  #     contentType = 'image/png'
  #   )
  

   #For histogram Depth
    #df3 <- plotdata2[,c('depth')]
    #plotdata3 <- subset(df3, !duplicated(df3[,1]))


 #plotdata <- subset(dataset, format(datetime, "%Y") >= 1800 & format(datetime, "%Y") <= 2015)
    #plotstations <- subset(stations.iris, format(start, "%Y") >= 1800 & 
    #                         format(start, "%Y") <= 2015 & lat >= 33.5 & 
    #                         lat <= 45.5 & lon <= -69 & lon >= -85)
    #df <- plotstations[,c('sta','start')]


 #Download Panel
  fluidRow(
     wellPanel(
#       #For downloading CSV textual output
#       downloadButton(downloadCSV, label = "Download Data as CSV", class = NULL),
#       #For downloading png visual output
#       downloadButton(downloadPNG, label = "Download Plots as Image", class = NULL)
     )
  )






##TEST PLOT##

# Single zoomable plot (on left)
ranges2 <- reactiveValues(x = NULL, y = NULL)

output$tplot <- renderPlot({
  ggplot(mtcars, aes(wt, mpg)) +
    geom_point() +
    coord_cartesian(xlim = ranges$x, ylim = ranges$y)
})

# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$tplot_dblclick, {
  #print("hello")
  brush <- input$tplot_brush
  if (!is.null(brush)) {
    ranges2$x <- c(brush$xmin, brush$xmax)
    ranges2$y <- c(brush$ymin, brush$ymax)
    
  } else {
    ranges2$x <- NULL
    ranges2$y <- NULL
  }
    #deduped.plotstations <- unique( df[1:2] )






 #ranges <- reactiveValues(x = NULL, y = NULL)
  
  # When a double-click happens, check if there's a brush on the plot.
  # If so, zoom to the brush bounds; if not, reset the zoom.
  observeEvent(input$plot_dblclick, {
    print("DOUBLE CLICK IS REGISTERING") #test line
    brush <- input$plot_brush
    print("Selected coords:", brush$xmin, brush$xmax) #test line
    print(brush$xmin) #test line
    if (!is.null(brush)) {
      #plotstations <- subset(stations.iris, format(start, "%Y") >= input$bins[1] & 
      #format(start, "%Y") <= input$bins[2] & lat >= latmin & 
      #lat <= latmax & lon <= lonmax & lon >= lonmin)
      #                        format(start, "%Y") <= input$bins[2] & lat >= 40 & 
      #                       lat <= 45.5 & lon <= -80 & lon >= -85)
      #format(start, "%Y") <= input$bins[2] & lat >= 35 & lat <= 40 & lon <= -75 & lon >= -80
      #ranges$x <- c(brush$xmin, brush$xmax)
      #ranges$y <- c(brush$ymin, brush$ymax)
      
      #plotstations <- subset(plotstations, format(start, "%Y") >= input$bins[1] &
      #                             format(start, "%Y") <= input$bins[2] & lat >= 40 & 
      #                             lat <= 45.5 & lon <= -80 & lon >= -85)
      
      #test.data <- plotstationsZoom
      
      ranges$latbrush <- c(brush$xmin, brush$xmax)
      ranges$lonbrush <- c(brush$ymin, brush$ymax)
      
      
    } else {
      ranges$latbrush <- NULL
      ranges$lonbrush <- NULL
    }
  })






=======
                             format(start, "%Y") <= input$bins[2] & 
                             lat <= input$manlatmax & lon <= input$manlonmax & lon >= input$manlonmin)
>>>>>>> d9554033923c9d81dec18c90483ff0e181bf7f2a







#format(start, "%Y") <= input$bins[2] & lat >= ranges$latmin & 
                             #lat <= ranges$latmax & lon <= ranges$lonmax & lon >= ranges$lonmin)
