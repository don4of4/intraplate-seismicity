library(ggplot2)
library(maps)
library(dplyr)
library(plyr)
data.neic <- read.table("../../2014_NEIC_declustered.c4.csv", header = TRUE, sep = ",")
data.anss <- read.table("../../anss.csv", header = TRUE, sep = ",")
colnames(data.anss) <- c("datetime","lat","lon","dp.km","mag","magtype","nbstations", "gap", "distance", "rms", "source", "eventid")
stations.iris <- read.table("../../out_fetchmdata_sept15", header = FALSE, sep = "|")
colnames(stations.iris) <- c("net","sta","loc","chan","lat","lon","elev","depth","azimuth","dip","instrument","scale","scalefreq","scaleunits","samplerate","start","end")
# Magnitude to mw
data.anss$emw <- ifelse(data.anss$magtype == "ML", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mb", 0.7813*data.anss$mag + 1.5175,
ifelse(data.anss$magtype == "Md", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mx", -1,
ifelse(data.anss$magtype == "Mh", -1,
ifelse(data.anss$magtype == "Mc",0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Unk", -1, -2)))))))
#FIXME: Why do I have bad values?
data.anss <- subset(data.anss, data.anss$emw > 0)
# Date formatting
data.neic$datetime <- ISOdatetime(data.neic$y, data.neic$m, data.neic$d, data.neic$h, data.neic$m.1, data.neic$s, tz = "")
stations.iris$start <- strptime(stations.iris$start,format="%Y-%m-%dT%H:%M:%OS")
stations.iris$end <- strptime(stations.iris$end,format="%Y-%m-%dT%H:%M:%OS")
#add miliseconds to format
stations.iris$start <- options(digits.secs=3)
stations.iris$end  <- options(digits.secs=3)
library(ggplot2)
library(maps)
library(dplyr)
library(plyr)
data.neic <- read.table("../../2014_NEIC_declustered.c4.csv", header = TRUE, sep = ",")
data.anss <- read.table("../../anss.csv", header = TRUE, sep = ",")
colnames(data.anss) <- c("datetime","lat","lon","dp.km","mag","magtype","nbstations", "gap", "distance", "rms", "source", "eventid")
stations.iris <- read.table("../../out_fetchmdata_sept15", header = FALSE, sep = "|")
colnames(stations.iris) <- c("net","sta","loc","chan","lat","lon","elev","depth","azimuth","dip","instrument","scale","scalefreq","scaleunits","samplerate","start","end")
# Magnitude to mw
data.anss$emw <- ifelse(data.anss$magtype == "ML", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mb", 0.7813*data.anss$mag + 1.5175,
ifelse(data.anss$magtype == "Md", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mx", -1,
ifelse(data.anss$magtype == "Mh", -1,
ifelse(data.anss$magtype == "Mc",0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Unk", -1, -2)))))))
#FIXME: Why do I have bad values?
data.anss <- subset(data.anss, data.anss$emw > 0)
# Date formatting
data.neic$datetime <- ISOdatetime(data.neic$y, data.neic$m, data.neic$d, data.neic$h, data.neic$m.1, data.neic$s, tz = "")
stations.iris$start <- strptime(stations.iris$start,format="%Y-%m-%dT%H:%M:%OS")
stations.iris$end <- strptime(stations.iris$end,format="%Y-%m-%dT%H:%M:%OS")
library(ggplot2)
library(maps)
library(dplyr)
library(plyr)
data.neic <- read.table("../../2014_NEIC_declustered.c4.csv", header = TRUE, sep = ",")
data.anss <- read.table("../../anss.csv", header = TRUE, sep = ",")
colnames(data.anss) <- c("datetime","lat","lon","dp.km","mag","magtype","nbstations", "gap", "distance", "rms", "source", "eventid")
stations.iris <- read.table("../../out_fetchmdata_sept15", header = FALSE, sep = "|")
colnames(stations.iris) <- c("net","sta","loc","chan","lat","lon","elev","depth","azimuth","dip","instrument","scale","scalefreq","scaleunits","samplerate","start","end")
# Magnitude to mw
data.anss$emw <- ifelse(data.anss$magtype == "ML", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mb", 0.7813*data.anss$mag + 1.5175,
ifelse(data.anss$magtype == "Md", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mx", -1,
ifelse(data.anss$magtype == "Mh", -1,
ifelse(data.anss$magtype == "Mc",0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Unk", -1, -2)))))))
#FIXME: Why do I have bad values?
data.anss <- subset(data.anss, data.anss$emw > 0)
# Date formatting
data.neic$datetime <- ISOdatetime(data.neic$y, data.neic$m, data.neic$d, data.neic$h, data.neic$m.1, data.neic$s, tz = "")
stations.iris$start <- strptime(stations.iris$start,format="%Y-%m-%dT%H:%M:%OS")
stations.iris$end <- strptime(stations.iris$end,format="%Y-%m-%dT%H:%M:%OS")
setwd("~/LU 15-16/Fall 2015/EES 293/R Code/Git Clone")
library(ggplot2)
library(maps)
library(dplyr)
library(plyr)
data.neic <- read.table("../../2014_NEIC_declustered.c4.csv", header = TRUE, sep = ",")
data.anss <- read.table("../../anss.csv", header = TRUE, sep = ",")
colnames(data.anss) <- c("datetime","lat","lon","dp.km","mag","magtype","nbstations", "gap", "distance", "rms", "source", "eventid")
stations.iris <- read.table("../../out_fetchmdata_sept15", header = FALSE, sep = "|")
colnames(stations.iris) <- c("net","sta","loc","chan","lat","lon","elev","depth","azimuth","dip","instrument","scale","scalefreq","scaleunits","samplerate","start","end")
# Magnitude to mw
data.anss$emw <- ifelse(data.anss$magtype == "ML", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mb", 0.7813*data.anss$mag + 1.5175,
ifelse(data.anss$magtype == "Md", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mx", -1,
ifelse(data.anss$magtype == "Mh", -1,
ifelse(data.anss$magtype == "Mc",0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Unk", -1, -2)))))))
#FIXME: Why do I have bad values?
data.anss <- subset(data.anss, data.anss$emw > 0)
# Date formatting
data.neic$datetime <- ISOdatetime(data.neic$y, data.neic$m, data.neic$d, data.neic$h, data.neic$m.1, data.neic$s, tz = "")
stations.iris$start <- strptime(stations.iris$start,format="%Y-%m-%dT%H:%M:%OS")
stations.iris$end <- strptime(stations.iris$end,format="%Y-%m-%dT%H:%M:%OS")
install.packages("maps")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("fpc", dependencies = TRUE)
install.packages("fossil")
library(ggplot2)
library(maps)
library(dplyr)
library(plyr)
library(fpc)
library(fossil)
# Utility function:  DO NOT EDIT
moveme <- function (invec, movecommand) {
movecommand <- lapply(strsplit(strsplit(movecommand, ";")[[1]],
",|\\s+"), function(x) x[x != ""])
movelist <- lapply(movecommand, function(x) {
Where <- x[which(x %in% c("before", "after", "first",
"last")):length(x)]
ToMove <- setdiff(x, Where)
list(ToMove, Where)
})
myVec <- invec
for (i in seq_along(movelist)) {
temp <- setdiff(myVec, movelist[[i]][[1]])
A <- movelist[[i]][[2]][1]
if (A %in% c("before", "after")) {
ba <- movelist[[i]][[2]][2]
if (A == "before") {
after <- match(ba, temp) - 1
}
else if (A == "after") {
after <- match(ba, temp)
}
}
else if (A == "first") {
after <- 0
}
else if (A == "last") {
after <- length(myVec)
}
myVec <- append(temp, values = movelist[[i]][[1]], after = after)
}
myVec
}
data.neic <- read.table("data/NEIC_HM_2014.csv", header = TRUE, sep = ",")
data.anss <- read.table("data/ANSS_2013.csv", header = TRUE, sep = ",")
colnames(data.anss) <- c("datetime","lat","lon","dp.km","mag","magtype","nbstations", "gap", "distance", "rms", "source", "eventid")
stations.iris <- read.table("data/out_fetchmdata_sept15", header = FALSE, sep = "|")
colnames(stations.iris) <- c("net","sta","loc","chan","lat","lon","elev","depth","azimuth","dip","instrument","scale","scalefreq","scaleunits","samplerate","start","end")
# Magnitude to mw
data.anss$emw <- ifelse(data.anss$magtype == "ML", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mb", 0.7813*data.anss$mag + 1.5175,
ifelse(data.anss$magtype == "Md", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mx", -1,
ifelse(data.anss$magtype == "Mh", -1,
ifelse(data.anss$magtype == "Mc",0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Unk", -1, -2)))))))
#FIXME: Why do I have bad values?
data.anss <- subset(data.anss, data.anss$emw > 0)
# Date formatting
options(digits.secs=3)
data.neic$datetime <- ISOdatetime(data.neic$y, data.neic$m, data.neic$d, data.neic$h, data.neic$m.1, data.neic$s, tz = "")
data.anss$datetime <- as.POSIXct(data.anss$datetime, tz = "")
stations.iris$start <- strptime(stations.iris$start,format="%Y-%m-%dT%H:%M:%OS")
stations.iris$end <- strptime(stations.iris$end,format="%Y-%m-%dT%H:%M:%OS")
#add miliseconds to format
#op <- options(digits.secs=3)
#options(op)
#stations.iris$start <- options(digits.secs=3)
#stations.iris$end  <- options(digits.secs=3)
#options(stations.iris$start) #reset options
#options(stations.iris$end) #reset options
# Rename lon and lat
data.neic$lon <- data.neic$lon.dE.
data.neic$lat <- data.neic$lat.dN.
data.neic$lon.dE. <- data.neic$lat.dN. <- data.neic$y <- data.neic$m <- data.neic$d <- data.neic$h <- data.neic$m.1 <- data.neic$s <- NULL
# Filter based on lat and long
m <- rbind.fill(data.neic, data.anss)
m <- dplyr::bind_rows(data.neic, data.anss)
dataset <- subset(m, lat >= 35.5 & lat <= 43.5 & lon <= -71 & lon >= -84 )
# Calculate distance matrix for the purposes of clustering.
coordinates  <- data.frame(long=dataset$lon, lat=dataset$lat)
dist  <- earth.dist(df, dist=T)
dens<-dbscan(dist,MinPts=25,eps=0.43,method="dist")
target_states <- c( "pennsylvania", "new york", "new jersey", "virginia", "kentucky","rhode island",
"massachusetts","vermont","new hampshire", "delaware", "maryland", "west virginia",
"north carolina", "tennessee", "ohio", "connecticut", "district of columbia" )
all_states <- map_data("state")
county <- map_data("county")
states <- subset(all_states, region %in% target_states)
county <- subset(county, region %in% target_states)
p <- ggplot() +
geom_polygon(aes(long,lat, group=group), fill="palegreen3", colour="grey60", data=county) +
geom_polygon( data=states, aes(x=long, y=lat, group = group),colour="royalblue4", fill=NA) +
annotate("rect", xmin=-84, xmax=-71, ymin=35.5, ymax=43.5, colour="black", size=1, fill="blue", alpha="0.01") +
geom_point(size=2, alpha = .7, aes(dataset$lon, dataset$lat, color=dataset$emw)) +
scale_color_gradient(low="blue", high="red") +
theme(plot.background = element_rect(fill = 'grey')) +
geom_abline(intercept = 3, slope = -.45, color = "blue", size = 1)
d <- dbscan(dataset, 10,showplot = 2)
View(moveme)
View(m)
View(m)
View(moveme)
View(moveme)
View(stations.iris)
View(stations.iris)
View(states)
View(all_states)
View(all_states)
View(m)
View(m)
View(stations.iris)
View(states)
View(m)
View(dataset)
View(dataset)
View(dataset)
View(data.neic)
View(data.neic)
shiny::runApp()
install.packages("shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("ggplot2")
install.packages("fpc", dependencies = TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("WeightedCluster")
library(WeightedCluster)
kmclust <- wcKMedoids(dist, 25, weights=NULL, npass = 1, initialclust=25, method="KMedoids", cluster.only = FALSE, debuglevel=0)
coordinates2  <- data.frame(long=dataset$lon, lat=dataset$lat)
dist2  <- earth.dist(df, dist=T)
library(fossil)
install.packages("fossil")
library(fossil)
coordinates2  <- data.frame(long=dataset$lon, lat=dataset$lat)
dist2  <- earth.dist(df, dist=T)
kmclust <- wcKMedoids(dist2, 25, weights=NULL, npass = 1, initialclust=25, method="KMedoids", cluster.only = FALSE, debuglevel=0)
coordinates2  <- data.frame(long=dataset$lon, lat=dataset$lat)
dist2  <- earth.dist(df, dist=T)
library(ggplot2)
library(maps)
library(plyr)
library(dplyr)
library(fpc)
library(fossil)
library(WeightedCluster)
data.neic <- read.table("data/NEIC_HM_2014.csv", header = TRUE, sep = ",")
data.neic$src <- 'HM_2014'
data.neic$declustered <- TRUE
data.anss <- read.table("data/ANSS_2013.csv", header = TRUE, sep = ",")
colnames(data.anss) <- c("datetime","lat","lon","dp.km","mag","magtype","nbstations", "gap", "distance", "rms", "source", "eventid")
data.anss$src <- 'ANSS_2013'
data.anss$declustered <- FALSE
stations.iris <- read.table("data/out_fetchmdata_sept15", header = FALSE, sep = "|")
colnames(stations.iris) <- c("net","sta","loc","chan","lat","lon","elev","depth","azimuth","dip","instrument","scale","scalefreq","scaleunits","samplerate","start","end")
data.anss$network <- 'IRIS'
data.small_mag <- read.table("data/small_mag_ISC_75_2012.txt", header = TRUE, sep = "\t")
colnames(data.small_mag) <- c("eventid", "author", "date","time", "lat","lon", "depth","depfix","magauthor","magtype","mag", "magauthor2", "magtype2", "mag2", "magauthor3", "magtype3", "mag3")
data.small_mag$src <- 'Small_Mag'
data.small_mag$declustered <- FALSE
# Date formatting
options(digits.secs=3)
data.neic$datetime <- ISOdatetime(data.neic$y, data.neic$m, data.neic$d, data.neic$h, data.neic$m.1, data.neic$s, tz = "")
data.anss$datetime <- as.POSIXct(data.anss$datetime, tz = "")
stations.iris$start <- strptime(stations.iris$start,format="%Y-%m-%dT%H:%M:%OS")
stations.iris$end <- strptime(stations.iris$end,format="%Y-%m-%dT%H:%M:%OS")
data.small_mag$datetime <- paste0(data.small_mag$date, "T", data.small_mag$time)
#strptime(data.small_mag$datetime, format="%m/%d/%yT%H:%M:%OS")
# FIXME: Hours in this data is invalid; most tuples are > 24.  Why?
# Rename lon and lat
data.neic$lon <- data.neic$lon.dE.
data.neic$lat <- data.neic$lat.dN.
data.neic$lon.dE. <- data.neic$lat.dN. <- data.neic$y <- data.neic$m <- data.neic$d <- data.neic$h <- data.neic$m.1 <- data.neic$s <- NULL
# Magnitude to mw
# Check event zone.
data.anss$f_NE <- ifelse(data.anss$lat > -0.45*data.anss$lon + 3, 1, 0)
data.anss$f_1997GSC <- ifelse(data.anss$lat > -0.45*data.anss$lon + 3, 1, 0)
data.anss$f_1982NE <- ifelse(data.anss$NE == 1 && data.anss$source != 'GSC' && format(data.anss$datetime, "%Y") < 1982, 1, 0)
data.anss$emw <- ifelse(data.anss$magtype == "ML", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mb", data.anss$mag - 0.316 - 0.118*data.anss$f_NE - 0.192*data.anss$f_1997GSC + 0.280*data.anss$f_1982NE,
ifelse(data.anss$magtype == "Md", 0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Mx", -1,
ifelse(data.anss$magtype == "Mh", -1,
ifelse(data.anss$magtype == "Mc",0.806*data.anss$mag + 0.633,
ifelse(data.anss$magtype == "Unk", -1, -2)))))))
# Filter out tuples with unknown mag
data.anss <- subset(data.anss, data.anss$emw > 0)
# Filter out based on lat and long
m <- rbind.fill(data.neic, data.anss)
m <- dplyr::bind_rows(data.neic, data.anss)
dataset <- subset(m, lat >= 35.5 & lat <= 43.5 & lon <= -71 & lon >= -84)
# Calculate distance matrix for the purposes of clustering.
coordinates  <- data.frame(long=dataset$lon, lat=dataset$lat)
dist  <- earth.dist(df, dist=T)
dens<-dbscan(dist,MinPts=25,eps=0.43,method="dist")
target_states <- c( "pennsylvania", "new york", "new jersey", "virginia", "kentucky","rhode island",
"massachusetts","vermont","new hampshire", "delaware", "maryland", "west virginia",
"north carolina", "tennessee", "ohio", "connecticut", "district of columbia" )
all_states <- map_data("state")
county <- map_data("county")
states <- subset(all_states, region %in% target_states)
county <- subset(county, region %in% target_states)
p <- ggplot() +
geom_polygon(aes(long,lat, group=group), fill="palegreen3", colour="grey60", data=county) +
geom_polygon( data=states, aes(x=long, y=lat, group = group),colour="royalblue4", fill=NA) +
annotate("rect", xmin=-84, xmax=-71, ymin=35.5, ymax=43.5, colour="black", size=1, fill="blue", alpha="0.01") +
geom_point(size=2, alpha = .7, aes(dataset$lon, dataset$lat, color=dataset$emw)) +
scale_color_gradient(low="blue", high="red") +
theme(plot.background = element_rect(fill = 'grey')) +
geom_abline(intercept = 3, slope = -.45, color = "grey", size = 1)
d <- dbscan(dataset, 10,showplot = 2)
p <- ggplot() +
geom_polygon(aes(long,lat, group=group), fill="palegreen3", colour="grey60", data=county) +
geom_polygon( data=states, aes(x=long, y=lat, group = group),colour="royalblue4", fill=NA) +
annotate("rect", xmin=-84, xmax=-71, ymin=35.5, ymax=43.5, colour="black", size=1, fill="blue", alpha="0.01") +
geom_point(size=2, alpha = .7, aes(dataset$lon, dataset$lat, color=dataset$emw)) +
scale_color_gradient(low="blue", high="red") +
theme(plot.background = element_rect(fill = 'grey')) +
geom_abline(intercept = 3, slope = -.45, color = "grey", size = 1)
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
# Application title
headerPanel("EES27 - Graphs Through Time"),
# Sidebar with a slider input for number of bins
sidebarPanel(
sliderInput("bins",
"Time:",
min = 1800,
max = 2015,
value = c(1800,2015),
sep = "",
step=5),
actionButton("decrement_end_year", "End-date -5ys"),
actionButton("increment_end_year", "End-date +5ys")
),
# Show a plot of the generated distribution
mainPanel(
#dataset = data.frame(
#  Longitude = c(35.5, 43.5),
#  Magnitude = factor(dataset$emw),
#  Latitude = c(-84,-71)
#),
h3(textOutput("caption")),
plotOutput("plot"),
plotOutput("plot2")
)
))
shiny::runApp()
install.packages("shiny")
shiny::runApp()
install.packages("shiny")
coords2  <- data.frame(long=dataset$lon, lat=dataset$lat)
dist2 <- dist(coords2, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
kmclust <- wcKMedoids(dist2, 25, weights=NULL, npass = 1, initialclust=25, method="KMedoids", cluster.only = FALSE, debuglevel=0)
library(WeightedCluster)
kmclust <- wcKMedoids(dist2, 25, weights=NULL, npass = 1, initialclust=25, method="KMedoids", cluster.only = FALSE, debuglevel=0)
